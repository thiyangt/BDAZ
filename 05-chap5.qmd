# Descriptive Statistics {#sec-chap5}

## What is Descriptive Statistics?
Describe the data

Descriptive statistics involves summarizing and organizing the data so they can be easily understood

Does not attempt to make inferences from the sample to the whole population

## Dataset Use for Illustrations

```{r, message=FALSE, warning=FALSE}
library(palmerpenguins)
library(tidyr)
library(dplyr)
library(ggplot2)
names(penguins)[names(penguins) == "sex"] <- "gender"
penguins_complete <- penguins |>
  drop_na()
quartiles <- quantile(penguins_complete$body_mass_g, probs = c(0.1, 0.5, 0.8))

pf <- penguins_complete |>
  mutate(BMI_category = case_when(
    body_mass_g <= quartiles[1] ~ "Underweight",
    body_mass_g > quartiles[1] & body_mass_g <= quartiles[2] ~ "Normal",
    body_mass_g > quartiles[2] & body_mass_g <= quartiles[3] ~ "Overweight",
    body_mass_g > quartiles[3] ~ "Obese"
  ))

pf
```

## Qualitative data: Univariate Analysis

Chart types we can use: Pie chart, Bar chart

Tables: Tables with counts and percentages


### Extract qualitative variables

```{r}
pf2 <- pf |> select(species, island, gender, BMI_category)
pf2 

```


### Nominal Scale Data


### Tabular representations

Frequency tables/ Contingency Tables

```{r}
# Create the frequency table
frequency_table <- pf |>
  count(species) |>
  mutate(percentage = round(n / sum(n) * 100, 2))

# Add the total row
total_row <- data.frame(species = "Total", 
                        n = sum(frequency_table$n), 
                        percentage = sum(frequency_table$percentage))

# Combine the frequency table with the total row
frequency_table <- bind_rows(frequency_table, total_row)

# Print the frequency table using kable
frequency_table |>
  knitr::kable(format = "markdown", col.names = c("Species", "Count", "Percentage (%)"))
```

### Graphical Representations

-   Simple Bar Charts

-   Pie Charts

#### Vertical Bar Chart

#### Counts Bar Chart

```{r}
library(scales) # For percentage formatting
library(RColorBrewer) # For Dark2 color palette
count_bar_chart <- ggplot(pf, aes(x = species,  fill = species)) +
  geom_bar() +
  labs(title = "Composition of the Sample by Species",
       x = "Species",
       y = "Count") +
scale_fill_brewer(palette = "Dark2")

count_bar_chart
```

#### Percentage Bar Chart

```{r}
percentage_bar_chart <- ggplot(pf, aes(x = species,  fill = species,
y=after_stat(count/sum(count)*100))) +
  geom_bar() +
  labs(title = "Composition of the Sample by Species",
       x = "Species",
       y = "Percentage") +
scale_fill_brewer(palette = "Dark2")

percentage_bar_chart
```


#### Horizontal Bar Chart

#### Counts Bar Chart

```{r}
library(scales) # For percentage formatting
library(RColorBrewer) # For Dark2 color palette
count_bar_chart <- ggplot(pf, aes(x = species,  fill = species)) +
  geom_bar() +
  labs(title = "Composition of the Sample by Species",
       x = "Species",
       y = "Count") +
scale_fill_brewer(palette = "Dark2") + coord_flip()

count_bar_chart
```

#### Percentage Bar Chart

```{r}
percentage_bar_chart <- ggplot(pf, aes(x = species,  fill = species,
y=after_stat(count/sum(count)*100))) +
  geom_bar() +
  labs(title = "Composition of the Sample by Species",
       x = "Species",
       y = "Percentage") +
scale_fill_brewer(palette = "Dark2") + coord_flip()

percentage_bar_chart
```

#### Sort bars for easy comparison


```{r}
penguins_complete <- penguins %>%
  drop_na(species)

# Create the frequency table with counts and percentages
frequency_table <- penguins_complete %>%
  count(species) %>%
  mutate(percentage = n / sum(n) * 100) %>%
  arrange(desc(n)) # Arrange species based on counts

# Plot the count bar chart
count_bar_chart <- ggplot(frequency_table, aes(x = reorder(species, n), y = n, fill = species)) +
  geom_bar(stat = "identity") +
  labs(title = "Composition of the Sample by Species",
       x = "Species",
       y = "Count") +
  theme_minimal() +
  scale_y_continuous(labels = scales::comma) +
  scale_fill_brewer(palette = "Dark2")
count_bar_chart 
```

```{r}
percentage_bar_chart <- ggplot(frequency_table, aes(x = reorder(species, n), y = percentage, fill = species)) +
  geom_bar(stat = "identity") +
  labs(title = "Composition of the Sample by Species",
       x = "Species",
       y = "Percentage") +
  theme_minimal() +
  scale_y_continuous(labels = scales::percent_format(scale = 1)) +
  scale_fill_brewer(palette = "Dark2")
percentage_bar_chart
```

```{r}
penguins_complete <- penguins %>%
  drop_na(species)

# Create the frequency table with counts and percentages
frequency_table <- penguins_complete %>%
  count(species) %>%
  mutate(percentage = n / sum(n) * 100) %>%
  arrange(desc(n)) # Arrange species based on counts

# Plot the count bar chart
count_bar_chart <- ggplot(frequency_table, aes(x = reorder(species, n), y = n, fill = species)) +
  geom_bar(stat = "identity") +
  labs(title = "Composition of the Sample by Species",
       x = "Species",
       y = "Count") +
  theme_minimal() +
  scale_y_continuous(labels = scales::comma) +
  scale_fill_brewer(palette = "Dark2")
count_bar_chart + coord_flip()
```

```{r}
percentage_bar_chart <- ggplot(frequency_table, aes(x = reorder(species, n), y = percentage, fill = species)) +
  geom_bar(stat = "identity") +
  labs(title = "Composition of the Sample by Species",
       x = "Species",
       y = "Percentage") +
  theme_minimal() +
  scale_y_continuous(labels = scales::percent_format(scale = 1)) +
  scale_fill_brewer(palette = "Dark2")
percentage_bar_chart + coord_flip()
```


#### Pie chart

```{r}
# Remove rows with missing species data
pf <- penguins %>%
  drop_na(species)

# Create the frequency table with counts and percentages
frequency_table <- pf %>%
  count(species) %>%
  mutate(percentage = n / sum(n) * 100)

# Plot pie chart
pie_chart <- ggplot(frequency_table, aes(x = "", y = n, fill = species)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start=0) +
  labs(title = "Composition of the Sample by Species") +
  theme_void() +
scale_fill_brewer(palette = "Dark2") +
  theme(legend.position = "bottom")
pie_chart
```

### Which is the best?

```{r}
percentage_bar_chart <- ggplot(frequency_table, aes(x = reorder(species, n), y = percentage, fill = species)) +
  geom_bar(stat = "identity") +
  labs(title = "Composition of the Sample by Species",
       x = "Species",
       y = "Percentage") +
  theme_minimal() +
  scale_y_continuous(labels = scales::percent_format(scale = 1)) +
  scale_fill_brewer(palette = "Dark2")
percentage_bar_chart + coord_flip()
```

```{r}
# Remove rows with missing species data
pf <- penguins %>%
  drop_na(species)

# Create the frequency table with counts and percentages
frequency_table <- pf %>%
  count(species) %>%
  mutate(percentage = n / sum(n) * 100)

# Plot pie chart
pie_chart <- ggplot(frequency_table, aes(x = "", y = n, fill = species)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start=0) +
  labs(title = "Composition of the Sample by Species") +
  theme_void() +
scale_fill_brewer(palette = "Dark2") +
  theme(legend.position = "bottom")
pie_chart
```


-   Pie charts are easier to compare for relative proportions.

-   Pie charts are best for a small number of categories.


-   Bar charts are better for comparing precise values.

-   Bar charts can handle more categories without becoming cluttered.


**Note:** Our visual system is typically better at comparing lengths or heights than angles. This inherent characteristic of human perception makes bar charts more effective than pie charts for comparing values or proportions.

#### Your turn

What other types of charts are suitable for visualizing nominal scale data?

### Ordinal Scale Data

#### Tabular Representation: One-wau tables

```{r}
pf2$BMI_category <- factor(pf2$BMI_category, levels=c("Underweight", "Normal",
"Overweight", "Obese"))
frequency_table2 <- pf2 |>
  count(BMI_category) |>
  mutate(counts = n) |>
  mutate(Cumulative_Count = cumsum(n)) |>
  mutate(percentage = round(n / sum(n) * 100, 2)) |>
 mutate(Cumulative_Percentage = round(cumsum(percentage), 2))

# View the results using kable
frequency_table2 <- frequency_table2 |> select(-n)
knitr::kable(frequency_table2, format = "markdown", col.names = c("BMI Category", "Count", "Cumulative Count", "Percentage", "Cumulative Percentage"))
```




#### Graphical representation



```{r}
pf2 |> ggplot(aes(x=BMI_category)) + geom_bar() + labs(x="BMI Category", title="Composition of the Sample by BMI Category")
```

**Question:** In this case, is it necessary to sort the bars in our data visualization for better clarity and interpretation?


## Qualitative data: Bivariate Analysis

### Tabular Representation: Two-way tables


```{r}
library(janitor)
# Create the two-way table
two_way_table <- pf2 |>
  count(species, BMI_category) |>
  spread(BMI_category, n, fill = 0) |>
  adorn_totals("row") |>
  adorn_totals("col") 

two_way_table |> knitr::kable()
```

Let's compute

-   Row percentage: percent that each cell represents of the row total
-   Column percentage: percent that each cell represents of the column total
-   Overall percentage (total percentage): percent that each cell represents of the grand total

```{r}
library(janitor)
library(dplyr)
library(tidyr)

# Create the two-way table with counts
two_way_table <- pf2 |>
  count(species, BMI_category) |>
  spread(BMI_category, n, fill = 0) |>
  adorn_totals("row") |>
  adorn_totals("col") 

# Add row %, column %, and total % in separate tables
row_percent <- two_way_table |> adorn_percentages("row") |> adorn_pct_formatting()
col_percent <- two_way_table |> adorn_percentages("col") |> adorn_pct_formatting()
total_percent <- two_way_table |> adorn_percentages("all") |> adorn_pct_formatting()

# Display
two_way_table |> knitr::kable(caption = "Counts")
row_percent   |> knitr::kable(caption = "Row Percentages")
col_percent   |> knitr::kable(caption = "Column Percentages")
total_percent |> knitr::kable(caption = "Total Percentages")

```

Why is it important to represent both counts and percentages?

-   Percentages can sometimes be misleading when the sample size is small. By presenting both counts and percentages, the reader can see the actual numbers behind the percentages.

-   When comparing different groups or datasets, percentages help standardize the comparison by accounting for differences in group sizes.


When presenting the counts and percentages, you can combine them to a single table.

```{r}
library(janitor)
library(dplyr)
library(tidyr)

# Create the two-way table with counts
two_way_table <- pf2 |>
  count(species, BMI_category) |>
  spread(BMI_category, n, fill = 0) |>
  adorn_totals("row") |>
  adorn_totals("col") 

# Row percentages
row_percent <- two_way_table |>
  adorn_percentages("row") |>
  adorn_pct_formatting(digits = 1)

# Combine counts + row percentages into one table
combined_table <- two_way_table
for (j in 2:ncol(two_way_table)) {
  combined_table[[j]] <- paste0(two_way_table[[j]], " (", row_percent[[j]], ")")
}

# Show table
combined_table |> knitr::kable(caption = "Counts with Row Percentages")

```


### Graphical representation

#### Grouped Bar Chart/ Clustered Bar Chart: With counts


```{r}
#| fig.cap: "Composition of the Sample by Species and BMI Category"
pf2 |>
  count(species, BMI_category) |>
  complete(species = unique(species), BMI_category = unique(BMI_category), 
           fill = list(n = 0)) |>
  ggplot(aes(factor(species), n, fill = factor(BMI_category))) + 
  geom_bar(stat = 'identity', position = 'dodge') + labs(fill = "BMI Category", x="Species", y="Counts")

```

Always try to level up your plots.

Change the  colour theme to emphasize the order.

```{r}
#| fig.cap: "Composition of the Sample by Species and BMI Category"
pf2 |>
  count(species, BMI_category) |>
  complete(species = unique(species), BMI_category = unique(BMI_category), 
           fill = list(n = 0)) |>
  ggplot(aes(factor(species), n, fill = factor(BMI_category))) + 
  geom_bar(stat = 'identity', position = 'dodge') + labs(fill = "BMI Category", x="Species", y="Counts") + scale_fill_manual(values = c("#042333ff",  "#593d9cff", "#b8627dff", "#f9a242ff"))

```

Add counts 

```{r}
#| fig.cap: "Composition of the Sample by Species and BMI Category"
p1 <- pf2 |>
  count(species, BMI_category) |>
  complete(species = unique(species), BMI_category = unique(BMI_category), 
           fill = list(n = 0)) |>
  ggplot(aes(factor(species), n, fill = factor(BMI_category))) + 
  geom_bar(stat = 'identity', position = 'dodge') + 
  geom_text(aes(label=n),  position = position_dodge(0.9),
                  vjust = 0, color = "black") + labs(fill = "BMI Category", x="Species", y="Counts") + scale_fill_manual(values = c("#042333ff",  "#593d9cff", "#b8627dff", "#f9a242ff"))
p1

```

#### Grouped Bar Chart/ Cluster Bar chart: With percentages

**Advantages**

-   Comparison within groups: It allows for easy comparison of values within each category group.

-   Comparison between groups: It also facilitates comparison between different category groups.

**Disadvantages**

-   If there are too many groups or variables, the bars can become narrow, making it difficult to read.

-   Complexity with many groups: With a large number of groups or variables, the chart can become crowded and hard to read.

-   Difficulty in showing totals: It's not straightforward to show the total magnitude of each category since bars are grouped.



```{r}
pf3 <- pf2 %>%
  count(species, BMI_category) %>%
  complete(species = unique(pf2$species), BMI_category = unique(pf2$BMI_category), fill = list(n = 0)) %>%
  group_by(species) %>%
  mutate(row_percentage = n / sum(n) * 100) %>%
  ungroup()

# Plotting code for row percentages
p2 <- ggplot(pf3, aes(x = factor(species), y = row_percentage, fill = factor(BMI_category))) +
  geom_bar(stat = 'identity', position = 'dodge') +
  geom_text(aes(label = sprintf("%.1f%%", row_percentage)), 
            position = position_dodge(width = 0.9), vjust = -0.5, color = "black") +
  labs(fill = "BMI Category", x = "Species", y = "Percentage") +
  scale_fill_manual(values = c("#042333ff",  "#593d9cff", "#b8627dff", "#f9a242ff")) +
  ylim(0, 100) +  # Ensure y-axis starts from 0 and ends at 100
  theme_minimal() 
p2
```


####  Staked Bar Chart


**Stacked Bar Chart: Advantages**

-   Allows viewers to see how totals accumulate as each category is stacked on top of one another.

-   Useful for comparing the total magnitude of each category across different groups or segments.

-   Ideal when the emphasis is on the total quantity of items in each category rather than their relative proportions.

**Stacked Percentage Chart**

-   Use when you want to show the relative proportion or contribution of each category to the total.

-   Helpful for illustrating the distribution of percentages within categories across different groups or segments.

-   Suitable when you want to emphasize the composition or share of each category relative to the whole.


**Stacked Bar Chart: Disadvantages**

-   It can be challenging to compare individual segments between different groups because they are not aligned horizontally.

-   Small segments can be hard to interpret accurately when they are stacked on top of each other.


Counts

```{r}
pf2 |>
  count(BMI_category, species) |>
  ggplot(aes(fill=factor(species), y= n, x = factor(BMI_category))) + 
  geom_bar(stat = 'identity', position = 'stack') + 
 geom_text(aes(label =n),
            position = position_stack(vjust = 0.5), 
            size = 3, 
            color = "white") +
labs(x = "BMI Category", fill ="Species", y="Counts") +
scale_fill_brewer(palette = "Dark2")

```


With percentages

```{r}
pf2 |>
  count(BMI_category, species) |>      
  group_by(BMI_category) |>
  mutate(pct= prop.table(n) * 100) %>%
  ggplot() + aes(BMI_category, pct, fill=species) +
  geom_bar(stat="identity") +
  ylab("Percentage") +
  xlab("BMI Category")+
  geom_text(aes(label=paste0(sprintf("%1.1f", pct),"%")),
            position=position_stack(vjust=0.5)) + scale_fill_brewer(palette = "Dark2")
```

You can also take the horizontal version of the bar charts as well. 

With counts

```{r}
pf2 |>
  count(BMI_category, species) |>
  ggplot(aes(fill=factor(species), y= n, x = factor(BMI_category))) + 
  geom_bar(stat = 'identity', position = 'stack') + 
 geom_text(aes(label =n),
            position = position_stack(vjust = 0.5), 
            size = 3, 
            color = "white") +
labs(x = "BMI Category", fill ="Species", y="Counts") +
scale_fill_brewer(palette = "Dark2") + coord_flip()

```

With percentages

```{r}
pf2 |>
  count(BMI_category, species) |>      
  group_by(BMI_category) |>
  mutate(pct= prop.table(n) * 100) %>%
  ggplot() + aes(BMI_category, pct, fill=species) +
  geom_bar(stat="identity") +
  ylab("Percentage") +
  xlab("BMI Category")+
  geom_text(aes(label=paste0(sprintf("%1.1f", pct),"%")),
            position=position_stack(vjust=0.5)) + scale_fill_brewer(palette = "Dark2") + coord_flip()
```

#### Count chart vs Percentage Cluster Bar Charts

```{r}
pf2 |>
  count(BMI_category, species) |>
  complete(species = unique(species), BMI_category = unique(BMI_category), 
           fill = list(n = 0)) |>
  ggplot(aes(fill=factor(species), y= n, x = factor(BMI_category))) + 
  geom_bar(stat = 'identity', position = 'dodge') + 
 geom_text(aes(label =  n), 
            position = position_dodge(width = 0.9), vjust = -0.5, color = "black") +
labs(x = "BMI Category", fill ="Species", y="Counts") +
scale_fill_brewer(palette = "Dark2")

```


```{r}
pf4 <- pf2 %>%
  count(species, BMI_category) %>%
  complete(species = unique(pf2$species), BMI_category = unique(pf2$BMI_category), fill = list(n = 0)) %>%
  group_by(BMI_category) %>%
  mutate(col_percentage = n / sum(n) * 100) %>%
  ungroup()

# Plotting code for row percentages
p3 <- ggplot(pf4, aes(x = factor(BMI_category), y = col_percentage, fill = factor(species))) +
  geom_bar(stat = 'identity', position = 'dodge') +
  geom_text(aes(label = sprintf("%.1f%%", col_percentage)), 
            position = position_dodge(width = 0.9), vjust = -0.5, color = "black") +
  labs(x = "BMI Category", fill = "Species", y = "Percentage") +
  ylim(0, 100) +  # Ensure y-axis starts from 0 and ends at 100
 scale_fill_brewer(palette = "Dark2")
p3
```


**Percentage charts: Advantages**

-   Shows the proportion of each category relative to the whole, making it easier to understand the distribution.

-   Allows for fair comparisons between different groups or categories, regardless of their size.

-   Highlights the relative importance of different categories within each group.

**Percentage charts: Disadvantages**

-   Doesn’t provide the raw counts, which might be necessary for understanding the actual volume or size of each category.



**Count charts: Advantages**

-   Clearly shows the frequency of each category, providing a direct understanding of the volume or size.

-   Useful when the actual count is crucial for decision-making.

**Count charts: Disadvantages**

-   Difficulties arise when comparing groups, especially when their sizes differ.




#### Which is the best?

```{r, fig.height=10}
pf2 |>
  count(BMI_category, gender) |>      
  group_by(BMI_category) |>
  mutate(pct= prop.table(n) * 100) %>%
  ggplot() + aes(BMI_category, pct, fill=gender) +
  geom_bar(stat="identity",  position = 'dodge') +
  ylab("Percentage") +
  xlab("Gender")+
  geom_text(aes(label = sprintf("%.1f%%", pct)), 
            position = position_dodge(width = 0.9), vjust = -0.5, color = "black") + scale_fill_manual(values=c("#f768a1", "#1d91c0")) + labs(fill="Gender")
```

```{r, fig.height=10}
pf2 |>
  count(BMI_category, gender) |>      
  group_by(BMI_category) |>
  mutate(pct= prop.table(n) * 100) %>%
  ggplot() + aes(BMI_category, pct, fill=gender) +
  geom_bar(stat="identity") +
  ylab("Percentage") +
  xlab("Gender")+
  geom_text(aes(label=paste0(sprintf("%1.1f", pct),"%")),
            position=position_stack(vjust=0.5)) + scale_fill_manual(values=c("#f768a1", "#1d91c0")) + labs(fill="Gender")
```


#### Facet Bar Chart

A facet bar chart is simply a set of bar charts that are split (or faceted) into multiple smaller plots, usually based on the values of one or more categorical variables.


```{r, fig.height=10}
pf2 |>
  count(BMI_category, gender) |>      
  group_by(BMI_category) |>
  mutate(pct= prop.table(n) * 100) %>%
  ggplot() + aes(BMI_category, pct, fill=gender) +
  geom_bar(stat="identity",  position = 'dodge') +
  ylab("Percentage") +
  xlab("Gender")+
  geom_text(aes(label = sprintf("%.1f%%", pct)), 
            position = position_dodge(width = 0.9), vjust = -0.5, color = "black") + scale_fill_manual(values=c("#f768a1", "#1d91c0"))  + facet_wrap(vars(gender))
```


**Facet by BMI Category**

```{r, fig.height=10, fig.width=12}
pf2 |>
  count(BMI_category, gender) |>      
  group_by(BMI_category) |>
  mutate(pct= prop.table(n) * 100) %>%
  ggplot() + aes(fill=BMI_category, pct, x=gender) +
  geom_bar(stat="identity",  position = 'dodge') +
  ylab("Percentage") +
  xlab("Gender")+
  geom_text(aes(label = sprintf("%.1f%%", pct)), 
            position = position_dodge(width = 0.9), vjust = -0.5, color = "black") +  facet_wrap(vars(BMI_category), ncol=4)
```




## Quntitative data: Univariate Analysis

### Graphical representations

#### Histogram

- A histogram shows the frequency distribution of a numeric variable.

- The data range is divided into bins (intervals), and the height of each bar represents the number (or proportion) of observations falling in that interval.

- Helps to identify:

    - Shape of distribution (normal, skewed, bimodal, etc.)

    - Spread of values

    - Outliers (indirectly, as bars may extend far out)

```{r}
ggplot(penguins, aes(x=body_mass_g)) + 
  geom_histogram(col="white") +
  xlab("Body mass (g)")
```


#### Box and Whisker Plot (or Box Plot) 

- summarizes the five-number summary ($Q1 - 3IQR$, $Q1$, $Q2$, $Q3$, $Q3 + 3IQR$)

- Outliers are usually marked as individual points beyond whiskers.

```{r}
ggplot(penguins, aes(x=body_mass_g)) + 
  geom_boxplot() + 
  xlab("Body mass (g)") 
  
```

## Summary Measures

### Measures of Central Tendency

-   Used to identify the center of data distribution.

-   It describes a whole set of data with a single value that represents the center of its distribution.

-   One number that best summarizes the entire set of measurement.

-   Measures of central tendency: mode, median, mean, weighted mean, harmonic mean, geometric mean, quadratic mean

#### Mode

-   The most frequently occurring value in a set of data.

-   Can be used to determine which category occurs most frequently

   Example 1: Determine the mode for the following numbers.

    2, 4, 8, 4, 6, 2, 7, 8, 4, 3, 8, 9, 4, 3, 10, 21, 4

  The mode can be determined for qualitative data as well as quantitative data.

  Example 2: A group of 10 people were asked about their favorite shoe color.


    Black, Blue, Brown, White, Black, Black, Black, Brown, Brown, Black
    
Your turn:

Compute the mode for the following numbers

**Dataset 1**

0.5, 0.1, 0.8, 0.8, 0.8, 0.7, 0.7, 0.7, 0.6, 0.2, 0.3, 0.1, 0.8, 0.7

**Dataset 2**

2, 4, 6, 8, 10, 12, 14, 16

**Important facts about mode**

1.  Unimodal - only 1 mode

2.  Bimodal - 2 modes

3.  Multimodal - more than 2 modes

4.  No mode: There is no mode when all observed values appear the same number of times in a data set.

#### Median

-   The middle value in an ordered array of numbers.

-   For an array with an odd number of observations, the median is the middle number.

-   For an array with an even number of observations, median is the mean of the two middle numbers.

**Steps in calculating median**

1.  Arrange the data in an ordered array of numbers.

2.  Count the number of observations. Suppose there are $n$ number of observations.

3.  Locate the middle value of the ordered array as follows

**Median formula when $n$ is odd**

$Median = (\frac{n+1}{2})^{th} \text{observation}$

**Median formula when $n$ is even**

$Median = \frac{(\frac{n}{2})^{observation} + (\frac{n}{2} + 1)^{observation}}{2}$

**Your turn**

Compute the median for the following numbers.

Dataset 1:

214, 215, 216, 105, 109, 8, 50, 1000, 150

Dataset 2:

2, 3, 10, 11, 50, 5, 8, 9, 10, 5

#### Mean (Arithmetic mean)

Population mean: $\mu$

Population size: $N$

$$\mu = \frac{\sum_{i=1}^Nx_i}{N}$$ 

Sample mean: $\bar{x}$

Sample size: $n$

$$\bar{x} = \frac{\sum_{i=1}^nx_i}{n}$$

Your turn

Determine the mean for the following numbers.

Q1:

214, 215, 216, 105, 109, 8, 50, 1000, 150

Q2:

2, 3, 10, 11, 50, 5, 8, 9, 10, 5

### Measures of Dispersion

#### Range: Maximum - Minimum

Advantages

-   Easy measure

-   Easy to understand

Disadvatages

-   It only takes into account the maximum and the minimum value.

-   Highly sensitive to outliers.

-   Does not provide information about the spread of data between the minimum and maximum values, nor does it indicate whether the data points are clustered or evenly distributed.

#### Variance

-   Variance is the mean squared deviations from the mean.

-   Measure of the spread of the data around the mean.

**Population Variance**

$$\text{Population variance} = \sum_{i=1}^N \frac{(x_i-\mu)^2}{N}$$

$N$ - population size

$\mu$ - population mean

**Sample Variance**

$$\text{Sample variance} = \sum_{i=1}^n \frac{(x_i-\bar{x})^2}{n-1}$$

$n$ - sample size

$\bar{x}$ - sample mean


Advantages:

-   Variance considers all data points in the dataset.

Disadvantages:

-   Sensitive to outliers/ extreme values.

-   The units of variance are the square of the units of the original data, which can make interpretation difficult. For example, if the data are in meters, the variance will be in square meters.

-   Variance is less intuitive to understand than other measures of dispersion like the range or interquartile range. People often find the concept of squared deviations harder to grasp.

#### Standard deviation

$$\text{Standard deviation} = \sqrt{Variance}$$

-   The variance and the standard deviation are measures of the spread of the data around the mean. They summarise how close each observed data value is to the mean value.

-   Standard deviation is expressed in the same units as the original values (e.g., minutes or meters)

 In datasets with a small spread all values are very close to the mean, resulting in a small variance and standard deviation.
 
#### Interquartile Range (IQR)

We will talk about this after looking at measures of relative standing/ measures of noncentral location.

-   Measure of dispersion

$$IQR = Q_3 - Q_1$$

-   Measure considers the spread in the middle 50% of the data.

-   Not influenced by extreme values.
 
### Measures of relative standing/ Measures of noncentral location

-   Quartiles

-   Percentiles


#### Quantiles

Quantiles are descriptive measures that split the ordered data into four quarters (four equal parts).

Q1 - first (lower) quantile

Q2 - second (middle) quantile

Q3 - third (upper) quantile

> First quantile

The value which 25% of the observations are smaller and 75% are larger

$$Q_1 = \frac{n+1}{4} \text{ ordered observation}$$

> Second quantile

Same as median

> Third quantile

The value for which 75% of the observations are smaller and 25% are larger

$$Q_3 = \frac{3(n+1)}{4} \text{ ordered observation}$$

#### Percentiles

-   Percentiles divides a given ordered data array into 100 equal parts, it divides the complete data set into hundred groups of 1% each. There are total of 99 percentiles denoted as P1, P2, P3,…, and, P99, and they are known as 1st percentile, 2nd percentile,…., 99th percentile respectively.

first decile = 10th percentile

Q1 = 25th percentile

Q2 = 50th percentile

Q3 = 75th percentile

ninth decile = 90th percentile

**Location of a percentile**

The following formula allows us to approximate the location of any percentile.

$$L_p = (n+1)\frac{p}{100}$$

where $L_p$ is the location of the $p^{th}$ percentile.


### Tabular representation

```{r}
#| echo: true
library(dplyr)
library(palmerpenguins)
library(knitr)

penguins |>
  summarise(
    Minimum     = min(body_mass_g, na.rm = TRUE),
    Q1      = quantile(body_mass_g, 0.25, na.rm = TRUE),
    Median  = median(body_mass_g, na.rm = TRUE),
    Mean    = mean(body_mass_g, na.rm = TRUE),
    Q3      = quantile(body_mass_g, 0.75, na.rm = TRUE),
    Maximum     = max(body_mass_g, na.rm = TRUE),
    SD      = sd(body_mass_g, na.rm = TRUE),
    N       = n()
  ) |>
  kable(caption = "Summary statistics for Penguin Body Mass (g)")

```

## Quantitative data: Bivariate Analysis

### Graphical Representation

```{r}
ggplot(penguins, aes(x=body_mass_g,
                     y=flipper_length_mm)) + geom_point()
```

### Tabular representation

In addition to the descriptive measures we can also record the Pearson's correlation coefficient. 

In this case Pearson's correlation coefficient is

```{r}
#|echo: true
library(dplyr)
library(palmerpenguins)

penguins |>
  summarise(
    correlation = cor(body_mass_g, flipper_length_mm, use = "complete.obs")
  )

```

## Qualitative vs Quantitative


## Quantitative vs Quantitative with a Qualitative variable

## Some rules


1.  Don't make them 3D: 3D charts can distort data and make it difficult to accurately interpret values.

2.  Don't use overly complex charts: Keep it simple. Overly complex charts can confuse the viewer and obscure the data.

3.  Don't use excessive colors: Too many colors can be distracting and make the chart hard to read. Stick to a simple color palette.

4.  Don't use misleading scales: Ensure the scales start at zero (when appropriate) and are consistent to avoid misrepresenting the data.

5.  Don't use pie charts for too many categories: Pie charts are hard to interpret with more than a few slices. Use a bar chart instead.

6.  Don't use inappropriate chart types: Match the chart type to the data you are presenting. For example, use line charts for trends over time and bar charts for comparing categories.


7.  Don't omit axis labels and titles: Always label your axes and give your chart a clear, descriptive title.

8.  Don't clutter with too much information: Avoid adding unnecessary elements like excessive gridlines, text, or data points.

9.  Don't ignore accessibility: Ensure your charts are readable for people with color blindness by using colorblind-friendly palettes and providing text alternatives.

10. Don't make legends and labels too small: Ensure that legends and labels are large enough to be easily read.

11. Don't use default settings without customization: Default settings might not be the best for your data. Customize your charts to improve clarity and impact.

12. Don't ignore data source and context: Always provide the data source and context to help the audience understand where the data comes from and its relevance.
